 String constants
• A string constant can be created by enclosing the string in double quotation marks and assigning it to a char pointer. The string constants are stored in read-only memory.
• The double quotation string is stored by default in read-only memory except for one situation, where you are using the string to initialize a char array.
• When the string is assigned to a pointer variable on left, the double quotation expression returns the based address of the string stored in read-only memory. Base address is nothing but the address of the first element of an array.

Eg., char *pstr = “Kernel”;

Char array vs string constant
A string can be represented in two ways, either using a character array or using a character pointer.
char str[10] = “Kernel”; // string is stored in writable memory in the memory allocated for str.
char * pstr = “Kernel”; // string is in read-only memory & its base address is stored in pstr.

Character array (char [])
char str[10] = “Kernel”;

Character array is a set of consecutively stored characters.
The initialized string is created in writable memory (stack or data segment).

We can access each character of the string separately using index,eg.,  str[0] means ‘K’.

We can modify each character separately.
Eg., str[0] = ‘R’ ; // works fine

Size of the character array variable is the number of bytes allocated for the string.
Eg., sizeof(str) here is 7.

Cannot assign a new string to the character array.
Eg., str = “Raayan”; //gives compilation error

Size of the array is fixed. So string length is limited.
Can take as user input using scanf.
scanf(“%s”,str); // works fine upto the size of the array



Character pointer (char *) initialized to a string constant

char * pstr = “Kernel”;
Character pointer is single pointer variable that stores the address of the first character of the string.

The initialized string is created in read-only section of data segment.

We can access each character of the string separately using index,eg., pstr[0] means ‘K’.


Cannot modify the individual characters.
Eg., pstr[0] = ‘R’; //gives runtime error

Size of the character pointer will be 4/8 (size of pointer).
Eg., sizeof(pstr) is 8.

Can assign a new string to the character pointer.
Eg., pstr = “Raayan”; //creates new string in read-only memory and assigns its base address to pstr.

Size of the read-only string can be anything. Since we are storing only based address in the pointer,string length is not limited like in array.

Need to initialize the pointer to some writable address, then only we can input some string.
Eg., char * pstr = str; //str is character array
scanf(“%s”,ptr);
